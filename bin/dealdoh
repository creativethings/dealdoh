#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use GuzzleHttp\Client as HttpClient;
use Http\Adapter\Guzzle6\Client;
use NoGlitchYo\Dealdoh\Client\DohClient;
use NoGlitchYo\Dealdoh\Client\GoogleDnsClient;
use NoGlitchYo\Dealdoh\Client\StdClient;
use NoGlitchYo\Dealdoh\Command\AddUpstreamCommand;
use NoGlitchYo\Dealdoh\Command\ResolveCommand;
use NoGlitchYo\Dealdoh\Entity\DnsUpstreamPool;
use NoGlitchYo\Dealdoh\Factory\Dns\MessageFactory;
use NoGlitchYo\Dealdoh\Mapper\GoogleDns\MessageMapper;
use NoGlitchYo\Dealdoh\Service\DnsPoolResolver;
use Socket\Raw\Factory;
use Symfony\Component\Console\Application;

const UPSTREAMPOOL_FILE = __DIR__ . '/../config/upstreampool.json';

$application = new Application();

if (false === $upstreamPoolJson = file_get_contents(UPSTREAMPOOL_FILE)) {
    $upstreamPoolJson = '[]';
    file_put_contents(UPSTREAMPOOL_FILE, $upstreamPoolJson);
    //throw new Exception('Please define upstreampool.json.bak file in the `config` directory.');
}

$upstreamPool = DnsUpstreamPool::fromJson($upstreamPoolJson);

$dnsMessageFactory = new MessageFactory();
$httpClient = new Client(
    new HttpClient(['verify' => false])
);
$dnsClients = [
    new GoogleDnsClient(
        $httpClient,
        new MessageMapper()
    ),
    new DohClient(
        $httpClient,
        $dnsMessageFactory
    ),
    new StdClient(
        new Factory(),
        $dnsMessageFactory
    ),
];

$application->addCommands([
    new ResolveCommand(new DnsPoolResolver($upstreamPool, $dnsClients), $dnsMessageFactory),
    new AddUpstreamCommand(UPSTREAMPOOL_FILE)
]);

$application->run();

